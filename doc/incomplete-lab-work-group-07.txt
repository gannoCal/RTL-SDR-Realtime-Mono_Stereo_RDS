Caleb Gannon 400137271
Ben Stephens 400135219

In regards to Lab 1 comment:
-1 scipy block processing not implemented. The grade will be updated if the code was submitted as part of lab 2


This is a working scipy implimentation of block processing.

(This should bump our lab 1 mark up to 5/5. We only say this because we were told the Lab 1 comment:
-1 Bandpass not present in the code. However an image is present in the report

was rescinded, but we never saw the grade change and we wanted to make sure.)



import matplotlib.pyplot as plt
import numpy as np
from scipy.io import wavfile
from scipy import signal
import os

print(os.listdir())
os.chdir(os.path.dirname(os.path.abspath(__file__)))



def filter_block_processing(audio_data, \
							block_size, \
							audio_Fc, \
							audio_Fs, \
							N_taps):

	# derive filter coefficients
	firwin_coeff = signal.firwin(N_taps, audio_Fc/audio_Fs)
	# we assume the data is stereo as in the audio test file
	filtered_data = np.empty(shape = audio_data.shape)
	# start at the first block (with relative position zero)
	position = 0

	while True:

		# filter both left and right channels
		filtered_data[position:position+block_size, 0] = \
			signal.lfilter(firwin_coeff, 1.0, \
			audio_data[position:position+block_size, 0])
		filtered_data[position:position+block_size, 1] = \
			signal.lfilter(firwin_coeff, 1.0, \
			audio_data[position:position+block_size, 1])

		position += block_size
		if position > len(audio_data):
			break

	# to properly handle blocks you will need to use
	# the zi argument from lfilter from SciPy
	# explore SciPy, experiment, understand and learn!

	return filtered_data



# audio test file from: https://www.videvo.net/royalty-free-music/
if __name__ == "__main__":

	# use use wavfile from scipy.io for handling .wav files
	audio_Fs, audio_data = wavfile.read("../data/audio_test.wav")
	print(' Audio sample rate = {0:f} \
		\n Number of channels = {1:d} \
		\n Numbef of samples = {2:d}' \
		.format(audio_Fs, audio_data.ndim, len(audio_data)))
	
	# you can control also the block size
	block_processing_data = filter_block_processing(audio_data, \
						block_size = 1000, \
						audio_Fc = 10e3, \
						audio_Fs = audio_Fs, \
						N_taps = 51)

	wavfile.write("../data/working.wav", \
	 			audio_Fs, \
				block_processing_data.astype(np.int16))

	# it is suggested that you add plotting while troubleshooting
	# if you plot in the time domain, select a subset of samples,
	# from a particular channel (or both channels) e.g.,
	# audio_data[start:start+number_of_samples, 0]
	plt.show()
    
